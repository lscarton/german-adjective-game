{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["AdjectiveGame","sentences","setSentences","useState","currentSentence","setCurrentSentence","userAnswers","setUserAnswers","score","setScore","submitted","setSubmitted","useEffect","fetch","then","response","json","data","Array","answers","length","fill","catch","error","console","React","createElement","className","text","split","map","word","index","includes","key","size","value","onChange","e","handleChange","newAnswers","target","disabled","options","opt","i","onClick","nextSentence","alert","checkAnswers","correct","forEach","answer","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"+JAEe,SAASA,IACtB,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAAiBC,GAAsBF,mBAAS,IAChDG,EAAaC,GAAkBJ,mBAAS,KACxCK,EAAOC,GAAYN,mBAAS,IAC5BO,EAAWC,GAAgBR,oBAAS,GAE3CS,oBAAU,KACRC,MAAM,kBACHC,KAAMC,GAAaA,EAASC,QAC5BF,KAAMG,IACLf,EAAae,GACbV,EAAeW,MAAMD,EAAK,GAAGE,QAAQC,QAAQC,KAAK,OAEnDC,MAAOC,GAAUC,QAAQD,MAAM,2BAA4BA,KAC7D,IA6BH,OAAyB,IAArBtB,EAAUmB,OACLK,IAAAC,cAAA,OAAKC,UAAU,mBAAkB,cAIxCF,IAAAC,cAAA,OAAKC,UAAU,oCACbF,IAAAC,cAAA,MAAIC,UAAU,2BAA0B,iCACxCF,IAAAC,cAAA,KAAGC,UAAU,QAAO,yCACpBF,IAAAC,cAAA,OAAKC,UAAU,iEACZ1B,EAAUG,GAAiBwB,KAAKC,MAAM,KAAKC,IAAI,CAACC,EAAMC,IACrDD,EAAKE,SAAS,KACZR,IAAAC,cAAA,OAAKQ,IAAKF,EAAOL,UAAU,8BACzBF,IAAAC,cAAA,YAAOK,GACPN,IAAAC,cAAA,UACEC,UAAU,2CACVQ,KAAM,EACNC,MAAO9B,EAAY0B,IAAU,GAC7BK,SAAWC,GA5CJC,EAACP,EAAOI,KAC3B,MAAMI,EAAa,IAAIlC,GACvBkC,EAAWR,GAASI,EACpB7B,EAAeiC,IAyCcD,CAAaP,EAAOM,EAAEG,OAAOL,OAC9CM,SAAUhC,GAETT,EAAUG,GAAiBuC,QAAQb,IAAI,CAACc,EAAKC,IAC5CpB,IAAAC,cAAA,UAAQQ,IAAKW,EAAGT,MAAOQ,GAAMA,MAKnCnB,IAAAC,cAAA,QAAMQ,IAAKF,EAAOL,UAAU,QAAQI,KAIxCrB,EAQAe,IAAAC,cAAA,WACED,IAAAC,cAAA,KAAGC,UAAU,QAAO,UAAQnB,EAAM,MAAIP,EAAUG,GAAiBe,QAAQC,QACzEK,IAAAC,cAAA,UACEoB,QAnDWC,KACf3C,EAAkBH,EAAUmB,OAAS,GACvCf,EAAmBD,EAAkB,GACrCG,EAAeW,MAAMjB,EAAUG,EAAkB,GAAGe,QAAQC,QAAQC,KAAK,KACzEV,GAAa,IAEbqC,MAAM,sCA8CArB,UAAU,kDACX,SAZHF,IAAAC,cAAA,UACEoB,QArDaG,KACnB,IAAIC,EAAU,EACd5C,EAAY6C,QAAQ,CAACC,EAAQpB,KACvBoB,IAAWnD,EAAUG,GAAiBe,QAAQa,IAChDkB,MAGJzC,EAASyC,GACTvC,GAAa,IA8CPgB,UAAU,4CACX,WCpEM0B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAlB,EAAA,GAAAxB,KAAA0C,EAAAC,KAAA,UAAqB3C,KAAK4C,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH3C,IAAAC,cAACD,IAAM4C,WAAU,KACf5C,IAAAC,cAAC4C,EAAG,QAORjB","file":"static/js/main.56a3f599.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function AdjectiveGame() {\n  const [sentences, setSentences] = useState([]);\n  const [currentSentence, setCurrentSentence] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n\n  useEffect(() => {\n    fetch(\"questions.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        setSentences(data);\n        setUserAnswers(Array(data[0].answers.length).fill(\"\"));\n      })\n      .catch((error) => console.error(\"Error loading questions:\", error));\n  }, []);\n\n  const handleChange = (index, value) => {\n    const newAnswers = [...userAnswers];\n    newAnswers[index] = value;\n    setUserAnswers(newAnswers);\n  };\n\n  const checkAnswers = () => {\n    let correct = 0;\n    userAnswers.forEach((answer, index) => {\n      if (answer === sentences[currentSentence].answers[index]) {\n        correct++;\n      }\n    });\n    setScore(correct);\n    setSubmitted(true);\n  };\n\n  const nextSentence = () => {\n    if (currentSentence < sentences.length - 1) {\n      setCurrentSentence(currentSentence + 1);\n      setUserAnswers(Array(sentences[currentSentence + 1].answers.length).fill(\"\"));\n      setSubmitted(false);\n    } else {\n      alert(\"Game Over! Refresh to play again.\");\n    }\n  };\n\n  if (sentences.length === 0) {\n    return <div className=\"text-center p-4\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"p-4 max-w-lg mx-auto text-center\">\n      <h1 className=\"text-2xl font-bold mb-4\">German Adjective Endings Game</h1>\n      <p className=\"mb-4\">Select the correct adjective endings.</p>\n      <div className=\"text-lg mb-4 flex flex-wrap justify-center items-center gap-2\">\n        {sentences[currentSentence].text.split(\" \").map((word, index) =>\n          word.includes(\"_\") ? (\n            <div key={index} className=\"flex flex-col items-center\">\n              <span>{word}</span>\n              <select\n                className=\"border rounded px-2 py-1 mx-1 block w-20\"\n                size={4}\n                value={userAnswers[index] || \"\"}\n                onChange={(e) => handleChange(index, e.target.value)}\n                disabled={submitted}\n              >\n                {sentences[currentSentence].options.map((opt, i) => (\n                  <option key={i} value={opt}>{opt}</option>\n                ))}\n              </select>\n            </div>\n          ) : (\n            <span key={index} className=\"mx-1\">{word}</span>\n          )\n        )}\n      </div>\n      {!submitted ? (\n        <button\n          onClick={checkAnswers}\n          className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n        >\n          Submit\n        </button>\n      ) : (\n        <div>\n          <p className=\"mt-2\">Score: {score} / {sentences[currentSentence].answers.length}</p>\n          <button\n            onClick={nextSentence}\n            className=\"bg-green-500 text-white px-4 py-2 mt-2 rounded\"\n          >\n            Next\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}