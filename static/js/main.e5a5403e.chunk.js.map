{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["sentences","text","answers","App","index","setIndex","useState","userAnswers","setUserAnswers","score","setScore","feedback","setFeedback","currentSentence","React","createElement","className","split","map","part","i","key","length","type","value","onChange","e","handleChange","newAnswers","target","onClick","checkAnswers","every","ans","nextSentence","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+JAEA,MAAMA,EAAY,CAChB,CACEC,KAAM,uDACNC,QAAS,CAAC,IAAK,OAEjB,CACED,KAAM,qDACNC,QAAS,CAAC,IAAK,QAIJ,SAASC,IACtB,MAAOC,EAAOC,GAAYC,mBAAS,IAC5BC,EAAaC,GAAkBF,mBAAS,CAAC,GAAI,MAC7CG,EAAOC,GAAYJ,mBAAS,IAC5BK,EAAUC,GAAeN,mBAAS,IAEnCO,EAAkBb,EAAUI,GAwBlC,OACEU,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,MAAIC,UAAU,0BAAyB,iCACvCF,IAAAC,cAAA,SACGF,EAAgBZ,KAAKgB,MAAM,KAAKC,IAAI,CAACC,EAAMC,IAC1CN,IAAAC,cAAA,QAAMM,IAAKD,GACRD,EACAC,EAAIP,EAAgBX,QAAQoB,QAC3BR,IAAAC,cAAA,SACEQ,KAAK,OACLC,MAAOjB,EAAYa,GACnBK,SAAWC,GAjCJC,EAACD,EAAGN,KACvB,MAAMQ,EAAa,IAAIrB,GACvBqB,EAAWR,GAAKM,EAAEG,OAAOL,MACzBhB,EAAeoB,IA8BcD,CAAaD,EAAGN,GACjCJ,UAAU,4CAMpBF,IAAAC,cAAA,UAAQe,QAlCSC,KACDxB,EAAYyB,MAAM,CAACC,EAAKb,IAAMa,IAAQpB,EAAgBX,QAAQkB,KAE9EV,EAASD,EAAQ,GACjBG,EAAY,oBAEZA,EAAY,iCA4BmBI,UAAU,iDAAgD,SACzFF,IAAAC,cAAA,UAAQe,QAzBSI,KACnB1B,EAAe,CAAC,GAAI,KACpBI,EAAY,IACZP,GAAUD,EAAQ,GAAKJ,EAAUsB,SAsBAN,UAAU,sDAAqD,QAC9FF,IAAAC,cAAA,KAAGC,UAAU,QAAQL,GACrBG,IAAAC,cAAA,KAAGC,UAAU,kBAAiB,UAAQP,ICpD7B0B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAZ,EAAA,GAAAa,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrC,IAAAC,cAACD,IAAMsC,WAAU,KACftC,IAAAC,cAACZ,EAAG,QAORgC","file":"static/js/main.e5a5403e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst sentences = [\n  {\n    text: \"Der alt_ Mann beobachtete den rot__ Sonnenuntergang.\",\n    answers: [\"e\", \"en\"],\n  },\n  {\n    text: \"Die schön_ Blume steht auf dem grün__ Rasen.\",\n    answers: [\"e\", \"en\"],\n  },\n];\n\nexport default function App() {\n  const [index, setIndex] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([\"\", \"\"]);\n  const [score, setScore] = useState(0);\n  const [feedback, setFeedback] = useState(\"\");\n\n  const currentSentence = sentences[index];\n\n  const handleChange = (e, i) => {\n    const newAnswers = [...userAnswers];\n    newAnswers[i] = e.target.value;\n    setUserAnswers(newAnswers);\n  };\n\n  const checkAnswers = () => {\n    const isCorrect = userAnswers.every((ans, i) => ans === currentSentence.answers[i]);\n    if (isCorrect) {\n      setScore(score + 1);\n      setFeedback(\"✅ Correct!\");\n    } else {\n      setFeedback(\"❌ Incorrect. Try again!\");\n    }\n  };\n\n  const nextSentence = () => {\n    setUserAnswers([\"\", \"\"]);\n    setFeedback(\"\");\n    setIndex((index + 1) % sentences.length);\n  };\n\n  return (\n    <div className=\"p-4 text-center\">\n      <h1 className=\"text-xl font-bold mb-4\">German Adjective Endings Game</h1>\n      <p>\n        {currentSentence.text.split(\"_\").map((part, i) => (\n          <span key={i}>\n            {part}\n            {i < currentSentence.answers.length && (\n              <input\n                type=\"text\"\n                value={userAnswers[i]}\n                onChange={(e) => handleChange(e, i)}\n                className=\"border rounded w-12 text-center mx-1\"\n              />\n            )}\n          </span>\n        ))}\n      </p>\n      <button onClick={checkAnswers} className=\"bg-blue-500 text-white px-4 py-2 rounded mt-4\">Check</button>\n      <button onClick={nextSentence} className=\"bg-gray-500 text-white px-4 py-2 rounded mt-4 ml-2\">Next</button>\n      <p className=\"mt-4\">{feedback}</p>\n      <p className=\"mt-2 font-bold\">Score: {score}</p>\n    </div>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}